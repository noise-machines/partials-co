{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["TensorFlowCanvas","componentDidMount","this","updateCanvas","componentDidUpdate","props","imageData","canvas","refs","_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_2__","then","console","log","render","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","width","height","ref","Component","ModelRenderer","_this","_React$Component2","call","state","latentPoint","modelMetadata","latentDimensions","setState","prevProps","prevState","xOffset","yOffset","updateImageData","_this2","_this$props","model","add","div","multiplier","size","shape","expandDims","tile","reshape","scale","predict","squeeze","transpose","scalingFactor","description","url","animateFrame","MousePosition","_this3","_React$Component3","x","y","_this4","document","onmousemove","e","clientX","window","innerWidth","clientY","innerHeight","componentWillUnmount","children","App","_this5","_React$Component4","_this6","_this7","mouseModel","mousePosition","contents"],"mappings":"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","file":"component---src-pages-index-js-dcf009173546adfe17d5.js","sourcesContent":["import React from 'react'\nimport * as tf from '@tensorflow/tfjs'\n\nconst scale = (imageData, multiplier) => {\n  if (multiplier === 1) {\n    return imageData\n  }\n\n  let size = imageData.shape[0]\n  return imageData\n    .expandDims(2)\n    .tile([1, 1, multiplier, 1])\n    .reshape([size, size * multiplier, 3])\n    .expandDims(1)\n    .tile([1, multiplier, 1, 1])\n    .reshape([size * multiplier, size * multiplier, 3])\n}\n\nclass TensorFlowCanvas extends React.Component {\n  componentDidMount () {\n    this.updateCanvas()\n  }\n  componentDidUpdate () {\n    this.updateCanvas()\n  }\n  updateCanvas () {\n    if (!this.props.imageData) return\n    const canvas = this.refs.canvas\n    tf.toPixels(this.props.imageData, canvas).then(() => {\n      console.log('Canvas updated')\n    })\n  }\n  render () {\n    return (\n      <canvas width={this.props.width} height={this.props.height} ref='canvas'>\n        Hello world!\n      </canvas>\n    )\n  }\n}\n\nclass ModelRenderer extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      imageData: null,\n      latentPoint: null\n    }\n  }\n  componentDidMount () {\n    const latentPoint = tf.randomNormal([1, modelMetadata.latentDimensions])\n    this.setState({ latentPoint })\n  }\n  componentDidUpdate (prevProps, prevState) {\n    if (\n      this.props.xOffset !== prevProps.xOffset ||\n      this.props.yOffset !== prevProps.yOffset ||\n      (!prevState.latentPoint && this.state.latentPoint)\n    ) {\n      this.updateImageData()\n    }\n  }\n  updateImageData () {\n    const { model, modelMetadata, xOffset, yOffset } = this.props\n    if (!model) return\n    const imageData = tf.tidy(() => {\n      const latentPoint = this.state.latentPoint\n        .add(tf.scalar(xOffset))\n        .div(tf.scalar(2))\n      const unscaledImageData = model\n        .predict(latentPoint)\n        .squeeze()\n        .transpose([1, 2, 0])\n        .div(tf.scalar(2))\n        .add(tf.scalar(0.5))\n      const imageData = scale(unscaledImageData, modelMetadata.scalingFactor)\n      return imageData\n    })\n    this.setState({ imageData })\n  }\n  render () {\n    const modelMetadata = this.props.modelMetadata\n    const size = modelMetadata.size * modelMetadata.scalingFactor\n    return (\n      <TensorFlowCanvas\n        imageData={this.state.imageData}\n        width={size}\n        height={size}\n      />\n    )\n  }\n}\n\nconst modelMetadata = {\n  description: 'DCGAN, 64x64 (16 MB)',\n  url: 'https://storage.googleapis.com/store.alantian.net/tfjs_gan/chainer-dcgan-celebahq-64/tfjs_SmoothedGenerator_50000/model.json',\n  size: 64,\n  latentDimensions: 128,\n  scalingFactor: 4,\n  animateFrame: 200\n}\n\nclass MousePosition extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      x: 0,\n      y: 0\n    }\n  }\n  componentDidMount () {\n    document.onmousemove = e => {\n      const x = e.clientX / window.innerWidth\n      const y = e.clientY / window.innerHeight\n      this.setState({ x, y })\n    }\n  }\n  componentWillUnmount () {\n    document.onmousemove = null\n  }\n  render () {\n    return this.props.children(this.state)\n  }\n}\n\nexport default class App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      model: null\n    }\n  }\n  componentDidMount () {\n    tf.loadModel(modelMetadata.url).then(model => {\n      this.setState({ model })\n    })\n  }\n  render () {\n    const mouseModel = (\n      <MousePosition>\n        {mousePosition => (\n          <ModelRenderer\n            modelMetadata={modelMetadata}\n            model={this.state.model}\n            xOffset={mousePosition.x}\n            yOffset={mousePosition.y}\n          />\n        )}\n      </MousePosition>\n    )\n\n    const contents = this.state.model ? mouseModel : 'Loading'\n\n    return (\n      <div>\n        {contents}\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}